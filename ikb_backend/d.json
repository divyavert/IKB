{
  "Model": "mistral",
  "Prompt": "User Prompt: what is frontend tech stack used Context:[{'title': 'Summary (AdvantaLabs \u2013 Tech Stack Overview)', 'page_title': 'AdvantaLabs \u2013 Tech Stack Overview', 'content': 'AdvantaLabs\u2019 tech stack combines modern JavaScript frameworks , scalable backend microservices , robust AWS infrastructure , and disciplined version control practices . This approach ensures that our platform is fast, secure, and adaptable to the evolving needs of the ad tech industry.', 'metadata': {'title': 'Summary (AdvantaLabs \u2013 Tech Stack Overview)', 'content': 'AdvantaLabs\u2019 tech stack combines modern JavaScript frameworks , scalable backend microservices , robust AWS infrastructure , and disciplined version control practices . This approach ensures that our platform is fast, secure, and adaptable to the evolving needs of the ad tech industry.', 'id': 'ebd21a51-4558-4a71-b4d0-c040fd4aadda', 'pageTitle': 'AdvantaLabs \u2013 Tech Stack Overview'}}, {'title': '1. Frontend Overview (AdvantaLabs \u2013 Tech Stack Overview)', 'page_title': 'AdvantaLabs \u2013 Tech Stack Overview', 'content': 'Purpose: The frontend serves as the user-facing interface for our ad planning, reporting, and analytics tools. It is designed for performance, responsiveness, and scalability.\\n\\n\u2022 Technologies:\\n  \u2022 JavaScript (ES6+) \u2013 Primary programming language\\n  \u2022 TypeScript \u2013 Adds type safety and reduces runtime errors\\n\u2022 Frameworks:\\n  \u2022 React.js \u2013 Core framework for building reusable UI components\\n  \u2022 Next.js \u2013 Server-side rendering and routing for SEO and performance\\n\u2022 Libraries:\\n  \u2022 Redux Toolkit \u2013 State management\\n  \u2022 Axios \u2013 API requests\\n  \u2022 Styled Components \u2013 CSS-in-JS styling\\n  \u2022 Chart.js / Recharts \u2013 Data visualization for campaign analytics\\n\u2022 Build & Bundling Tools:\\n  \u2022 Webpack \u2013 Module bundler\\n  \u2022 Babel \u2013 JavaScript transpiler\\n\u2022 Testing Tools:\\n  \u2022 Jest \u2013 Unit testing\\n  \u2022 React Testing Library \u2013 Component testing', 'metadata': {'pageTitle': 'AdvantaLabs \u2013 Tech Stack Overview', 'id': 'cbbdbbdd-dc1e-48e1-a00c-ba17706c6d97', 'title': '1. Frontend Overview (AdvantaLabs \u2013 Tech Stack Overview)', 'content': 'Purpose: The frontend serves as the user-facing interface for our ad planning, reporting, and analytics tools. It is designed for performance, responsiveness, and scalability.\\n\\n\u2022 Technologies:\\n  \u2022 JavaScript (ES6+) \u2013 Primary programming language\\n  \u2022 TypeScript \u2013 Adds type safety and reduces runtime errors\\n\u2022 Frameworks:\\n  \u2022 React.js \u2013 Core framework for building reusable UI components\\n  \u2022 Next.js \u2013 Server-side rendering and routing for SEO and performance\\n\u2022 Libraries:\\n  \u2022 Redux Toolkit \u2013 State management\\n  \u2022 Axios \u2013 API requests\\n  \u2022 Styled Components \u2013 CSS-in-JS styling\\n  \u2022 Chart.js / Recharts \u2013 Data visualization for campaign analytics\\n\u2022 Build & Bundling Tools:\\n  \u2022 Webpack \u2013 Module bundler\\n  \u2022 Babel \u2013 JavaScript transpiler\\n\u2022 Testing Tools:\\n  \u2022 Jest \u2013 Unit testing\\n  \u2022 React Testing Library \u2013 Component testing'}}, {'title': 'Introduction (AdvantaLabs \u2013 Tech Stack Overview)', 'page_title': 'AdvantaLabs \u2013 Tech Stack Overview', 'content': 'This document provides a detailed overview of the core technologies, frameworks, and tools used at AdvantaLabs to build, deploy, and maintain our ad tech platform. It covers the frontend , backend , infrastructure , and versioning rules to ensure all stakeholders understand the components powering our systems.\\n', 'metadata': {'pageTitle': 'AdvantaLabs \u2013 Tech Stack Overview', 'content': 'This document provides a detailed overview of the core technologies, frameworks, and tools used at AdvantaLabs to build, deploy, and maintain our ad tech platform. It covers the frontend , backend , infrastructure , and versioning rules to ensure all stakeholders understand the components powering our systems.\\n', 'title': 'Introduction (AdvantaLabs \u2013 Tech Stack Overview)', 'id': '60aef3ce-84fd-4ff7-b6cd-b75ff100002b'}}, {'title': 'Purpose (AdvantaLabs \u2013 Code Review Guidelines)', 'page_title': 'AdvantaLabs \u2013 Code Review Guidelines', 'content': 'To maintain a high-quality, maintainable, and scalable codebase while fostering collaboration and knowledge sharing among team members. These guidelines apply to all code contributions , whether frontend, backend, or infrastructure-related.', 'metadata': {'title': 'Purpose (AdvantaLabs \u2013 Code Review Guidelines)', 'content': 'To maintain a high-quality, maintainable, and scalable codebase while fostering collaboration and knowledge sharing among team members. These guidelines apply to all code contributions , whether frontend, backend, or infrastructure-related.', 'id': 'cb1d61dc-522a-4302-8a4a-7f0568e49ff4', 'pageTitle': 'AdvantaLabs \u2013 Code Review Guidelines'}}, {'title': '1.1 Overview (AdvantaLabs \u2013 Backend Deployment Guide)', 'page_title': 'AdvantaLabs \u2013 Backend Deployment Guide', 'content': 'AdvantaLabs uses a GitHub Actions -based CI/CD pipeline to automate build, testing, and deployment of backend services. The backend is built with Node.js (Express) , containerized with Docker , and deployed to AWS Elastic Beanstalk .\\n\\nThe CI/CD process ensures:\\n\\n\u2022 Automated builds for every commit\\n\u2022 Quality assurance through tests before deployment\\n\u2022 Zero-downtime deployments to staging and production', 'metadata': {'id': '832db1af-d17e-4d6e-83ec-9f14cd154097', 'pageTitle': 'AdvantaLabs \u2013 Backend Deployment Guide', 'title': '1.1 Overview (AdvantaLabs \u2013 Backend Deployment Guide)', 'content': 'AdvantaLabs uses a GitHub Actions -based CI/CD pipeline to automate build, testing, and deployment of backend services. The backend is built with Node.js (Express) , containerized with Docker , and deployed to AWS Elastic Beanstalk .\\n\\nThe CI/CD process ensures:\\n\\n\u2022 Automated builds for every commit\\n\u2022 Quality assurance through tests before deployment\\n\u2022 Zero-downtime deployments to staging and production'}}, {'title': '2. Backend Overview (AdvantaLabs \u2013 Tech Stack Overview)', 'page_title': 'AdvantaLabs \u2013 Tech Stack Overview', 'content': 'Purpose: The backend provides secure APIs, business logic, and integration with ad networks, data stores, and reporting engines.\\n\\n\u2022 Programming Languages:\\n  \u2022 Node.js (JavaScript/TypeScript) \u2013 Primary backend runtime\\n\u2022 Frameworks:\\n  \u2022 Express.js \u2013 API framework for handling routing and middleware\\n  \u2022 Apollo Server \u2013 GraphQL API support for flexible data querying\\n\u2022 Server Architecture:\\n  \u2022 Microservices \u2013 Independent services for campaign management, analytics, and billing\\n  \u2022 Docker Containers \u2013 Isolated deployment units\\n  \u2022 REST + GraphQL APIs \u2013 Hybrid approach to serve various client needs\\n\u2022 Data Processing:\\n  \u2022 Apache Kafka \u2013 Real-time event streaming for campaign data ingestion\\n  \u2022 Redis \u2013 In-memory cache for session management and fast lookups\\n\u2022 Authentication & Authorization:\\n  \u2022 JWT (JSON Web Tokens) for stateless authentication\\n  \u2022 OAuth 2.0 for integration with external ad platforms', 'metadata': {'content': 'Purpose: The backend provides secure APIs, business logic, and integration with ad networks, data stores, and reporting engines.\\n\\n\u2022 Programming Languages:\\n  \u2022 Node.js (JavaScript/TypeScript) \u2013 Primary backend runtime\\n\u2022 Frameworks:\\n  \u2022 Express.js \u2013 API framework for handling routing and middleware\\n  \u2022 Apollo Server \u2013 GraphQL API support for flexible data querying\\n\u2022 Server Architecture:\\n  \u2022 Microservices \u2013 Independent services for campaign management, analytics, and billing\\n  \u2022 Docker Containers \u2013 Isolated deployment units\\n  \u2022 REST + GraphQL APIs \u2013 Hybrid approach to serve various client needs\\n\u2022 Data Processing:\\n  \u2022 Apache Kafka \u2013 Real-time event streaming for campaign data ingestion\\n  \u2022 Redis \u2013 In-memory cache for session management and fast lookups\\n\u2022 Authentication & Authorization:\\n  \u2022 JWT (JSON Web Tokens) for stateless authentication\\n  \u2022 OAuth 2.0 for integration with external ad platforms', 'id': '9c72ee07-2813-4b01-b303-5fe9dc888efc', 'title': '2. Backend Overview (AdvantaLabs \u2013 Tech Stack Overview)', 'pageTitle': 'AdvantaLabs \u2013 Tech Stack Overview'}}, {'title': 'Technology & Product Department (AdvantaLabs Organizational Structure: Leadership and Departmental Responsibilities)', 'page_title': 'AdvantaLabs Organizational Structure: Leadership and Departmental Responsibilities', 'content': '\u2022 Chief Technology Officer (CTO)\\n  \u2022 Reports to: CEO\\n\u2022 Director of Engineering\\n  \u2022 Reports to: CTO\\n\u2022 Frontend Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Backend Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Data Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Product Manager\\n  \u2022 Reports to: CTO\\n\u2022 UX/UI Designers\\n  \u2022 Report to: Product Manager', 'metadata': {'title': 'Technology & Product Department (AdvantaLabs Organizational Structure: Leadership and Departmental Responsibilities)', 'pageTitle': 'AdvantaLabs Organizational Structure: Leadership and Departmental Responsibilities', 'id': '1b41580b-2ce5-4cfc-9a90-b5ecf6920278', 'content': '\u2022 Chief Technology Officer (CTO)\\n  \u2022 Reports to: CEO\\n\u2022 Director of Engineering\\n  \u2022 Reports to: CTO\\n\u2022 Frontend Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Backend Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Data Engineers\\n  \u2022 Report to: Director of Engineering\\n\u2022 Product Manager\\n  \u2022 Reports to: CTO\\n\u2022 UX/UI Designers\\n  \u2022 Report to: Product Manager'}}, {'title': '2. Tools to Access (Complete within first 3 days) (AdvantaLabs \u2013 New Employee Onboarding Checklist)', 'page_title': 'AdvantaLabs \u2013 New Employee Onboarding Checklist', 'content': 'Ad Tech & Data Platforms\\n\\n\u2022 Campaign Management Tool \u2013 e.g., DV360, The Trade Desk, or company\u2019s proprietary platform\\n\u2022 Analytics & Reporting Tools \u2013 Google Analytics, Looker, Tableau, or internal BI dashboards\\n\u2022 CRM System \u2013 Salesforce, HubSpot, or equivalent for client relationship management\\n\u2022 Data Privacy & Compliance Tools \u2013 GDPR/CCPA compliance dashboard, consent management platform\\n\\nInternal Productivity Tools\\n\\n\u2022 Version Control \u2013 GitHub, GitLab, or Bitbucket (if applicable to role)\\n\u2022 Design Collaboration Tool \u2013 Figma, Miro, or equivalent for creative projects\\n\u2022 Password Manager \u2013 e.g., 1Password or LastPass for secure credential sharing\\n\u2022 VPN Access \u2013 For secure connection to company systems while working remotely', 'metadata': {'id': 'acda5241-628e-4a68-95cf-8ff4581e8ec4', 'content': 'Ad Tech & Data Platforms\\n\\n\u2022 Campaign Management Tool \u2013 e.g., DV360, The Trade Desk, or company\u2019s proprietary platform\\n\u2022 Analytics & Reporting Tools \u2013 Google Analytics, Looker, Tableau, or internal BI dashboards\\n\u2022 CRM System \u2013 Salesforce, HubSpot, or equivalent for client relationship management\\n\u2022 Data Privacy & Compliance Tools \u2013 GDPR/CCPA compliance dashboard, consent management platform\\n\\nInternal Productivity Tools\\n\\n\u2022 Version Control \u2013 GitHub, GitLab, or Bitbucket (if applicable to role)\\n\u2022 Design Collaboration Tool \u2013 Figma, Miro, or equivalent for creative projects\\n\u2022 Password Manager \u2013 e.g., 1Password or LastPass for secure credential sharing\\n\u2022 VPN Access \u2013 For secure connection to company systems while working remotely', 'title': '2. Tools to Access (Complete within first 3 days) (AdvantaLabs \u2013 New Employee Onboarding Checklist)', 'pageTitle': 'AdvantaLabs \u2013 New Employee Onboarding Checklist'}}, {'title': '3. Code Style Rules (AdvantaLabs \u2013 Code Review Guidelines)', 'page_title': 'AdvantaLabs \u2013 Code Review Guidelines', 'content': 'Purpose: Ensure consistent, clean, and predictable code across the team.\\n\\n### General\\n\\n\u2022 Follow TypeScript conventions for typed code.\\n\u2022 Use camelCase for variables and functions, PascalCase for classes and React components.\\n\u2022 Avoid magic numbers \u2013 use constants or enums.\\n\u2022 Keep functions small and single-purpose.\\n\\n### Frontend\\n\\n\u2022 Use React functional components with hooks.\\n\u2022 Apply Redux Toolkit for state management.\\n\u2022 Use Styled Components or designated CSS modules.\\n\u2022 Prefer optional chaining ( ?. ) for safe property access.\\n\\n### Backend\\n\\n\u2022 Use Express.js routing standards.\\n\u2022 Apply async/await instead of callbacks.\\n\u2022 Use DTOs (Data Transfer Objects) for request/response validation.\\n\u2022 Structure project into controllers, services, repositories .\\n\\n### Formatting & Linting\\n\\n\u2022 Prettier for formatting.\\n\u2022 ESLint for code linting.\\n\u2022 Commit hook ( pre-commit ) runs linting before pushing:npm run lint\\nnpm run format', 'metadata': {'title': '3. Code Style Rules (AdvantaLabs \u2013 Code Review Guidelines)', 'pageTitle': 'AdvantaLabs \u2013 Code Review Guidelines', 'id': '969f3da7-1859-4b13-ba82-3adbd5cd8b4a', 'content': 'Purpose: Ensure consistent, clean, and predictable code across the team.\\n\\n### General\\n\\n\u2022 Follow TypeScript conventions for typed code.\\n\u2022 Use camelCase for variables and functions, PascalCase for classes and React components.\\n\u2022 Avoid magic numbers \u2013 use constants or enums.\\n\u2022 Keep functions small and single-purpose.\\n\\n### Frontend\\n\\n\u2022 Use React functional components with hooks.\\n\u2022 Apply Redux Toolkit for state management.\\n\u2022 Use Styled Components or designated CSS modules.\\n\u2022 Prefer optional chaining ( ?. ) for safe property access.\\n\\n### Backend\\n\\n\u2022 Use Express.js routing standards.\\n\u2022 Apply async/await instead of callbacks.\\n\u2022 Use DTOs (Data Transfer Objects) for request/response validation.\\n\u2022 Structure project into controllers, services, repositories .\\n\\n### Formatting & Linting\\n\\n\u2022 Prettier for formatting.\\n\u2022 ESLint for code linting.\\n\u2022 Commit hook ( pre-commit ) runs linting before pushing:npm run lint\\nnpm run format'}}, {'title': '1. Introduction (AdvantaLabs \u2013 Frontend Deployment Guide)', 'page_title': 'AdvantaLabs \u2013 Frontend Deployment Guide', 'content': 'This document outlines the process for deploying the AdvantaLabs frontend application to the staging and production environments. The goal is to ensure a smooth, consistent, and error-free deployment so that stakeholders can quickly access new features and bug fixes.\\n\\nOur frontend is built using React and integrated with our backend APIs, making proper deployment crucial for maintaining performance, security, and a seamless user experience.\\n\\n### 2. Prerequisites\\n\\nBefore starting, ensure that the following tools, configurations, and access rights are in place:\\n\\n### Tools & Technologies\\n\\n\u2022 Node.js (v18 or above)node -v\\n\u2022 npm or yarn (latest stable version)npm -v   # or yarn -v\\n\u2022 Git (for version control)\\n\u2022 Docker (required for containerized builds)\\n\u2022 AWS CLI (configured with appropriate IAM credentials)\\n\u2022 Environment Variables configured for staging and production:\\n  \u2022 REACT_APP_API_URL\\n  \u2022 REACT_APP_ANALYTICS_KEY\\n  \u2022 REACT_APP_ENV\\n\\n### Access Requirements\\n\\n\u2022 Access to AdvantaLabs GitHub repository\\n\u2022 Permissions to push to main (production) or develop (staging) branches\\n\u2022 Permissions to access AWS S3 , CloudFront , and CI/CD pipelines\\n\\n### 3.3 Set Environment Variables\\n\\nCreate a .env file at the project root:\\n\\n> Tip: For production, replace with production API URLs and keys.\\n\\n### 3.4 Build the Application\\n\\nThis creates an optimized build/ directory.\\n\\n### 3.6 Invalidate CloudFront Cache\\n\\n> This ensures the latest build is served to users immediately.\\n\\n### 3.7 Verify Deployment\\n\\n\u2022 Visit the staging/production URL\\n\u2022 Check:\\n  \u2022 Homepage loads without errors\\n  \u2022 API calls succeed (verify in browser DevTools \u2192 Network tab)\\n  \u2022 UI elements render as expected\\n\\n### 4. Troubleshooting\\n\\nIssue | Possible Cause | Solution\\n--- | --- | ---\\nBlank screen after deployment | Missing or incorrect environment variables | Verify .env values and rebuild\\nStatic assets not loading | Cache not invalidated | Run CloudFront invalidation\\nAPI calls failing | API URL misconfigured | Check REACT_APP_API_URL in .env\\nSlow page load | Unoptimized build | Ensure npm run build is used for production\\nDeployment fails in CI/CD | Outdated Node.js or npm | Upgrade to required versions\\n\\n### 5. Best Practices\\n\\n\u2022 Branch Strategy\\n  \u2022 Use develop \u2192 staging\\n  \u2022 Use main \u2192 production\\n\u2022 Automated Builds\\n  \u2022 Configure CI/CD (e.g., GitHub Actions, Jenkins) to handle build & deploy\\n\u2022 Environment Separation\\n  \u2022 Never use production API keys in staging builds\\n\u2022 Testing Before Deployment\\n  \u2022 Run unit and integration tests before merging:npm test\\n\u2022 Versioning\\n  \u2022 Tag releases in Git for easier rollback:git tag -a v1.2.0 -m \"Frontend release 1.2.0\"\\n  git push origin v1.2.0\\n\u2022 Post-Deployment Monitoring\\n  \u2022 Use tools like AWS CloudWatch or Sentry to monitor errors and performance\\n\\n\u2705 Following this guide will help ensure deployments are predictable, reproducible, and low-risk for the AdvantaLabs frontend.', 'metadata': {'content': 'This document outlines the process for deploying the AdvantaLabs frontend application to the staging and production environments. The goal is to ensure a smooth, consistent, and error-free deployment so that stakeholders can quickly access new features and bug fixes.\\n\\nOur frontend is built using React and integrated with our backend APIs, making proper deployment crucial for maintaining performance, security, and a seamless user experience.\\n\\n### 2. Prerequisites\\n\\nBefore starting, ensure that the following tools, configurations, and access rights are in place:\\n\\n### Tools & Technologies\\n\\n\u2022 Node.js (v18 or above)node -v\\n\u2022 npm or yarn (latest stable version)npm -v   # or yarn -v\\n\u2022 Git (for version control)\\n\u2022 Docker (required for containerized builds)\\n\u2022 AWS CLI (configured with appropriate IAM credentials)\\n\u2022 Environment Variables configured for staging and production:\\n  \u2022 REACT_APP_API_URL\\n  \u2022 REACT_APP_ANALYTICS_KEY\\n  \u2022 REACT_APP_ENV\\n\\n### Access Requirements\\n\\n\u2022 Access to AdvantaLabs GitHub repository\\n\u2022 Permissions to push to main (production) or develop (staging) branches\\n\u2022 Permissions to access AWS S3 , CloudFront , and CI/CD pipelines\\n\\n### 3.3 Set Environment Variables\\n\\nCreate a .env file at the project root:\\n\\n> Tip: For production, replace with production API URLs and keys.\\n\\n### 3.4 Build the Application\\n\\nThis creates an optimized build/ directory.\\n\\n### 3.6 Invalidate CloudFront Cache\\n\\n> This ensures the latest build is served to users immediately.\\n\\n### 3.7 Verify Deployment\\n\\n\u2022 Visit the staging/production URL\\n\u2022 Check:\\n  \u2022 Homepage loads without errors\\n  \u2022 API calls succeed (verify in browser DevTools \u2192 Network tab)\\n  \u2022 UI elements render as expected\\n\\n### 4. Troubleshooting\\n\\nIssue | Possible Cause | Solution\\n--- | --- | ---\\nBlank screen after deployment | Missing or incorrect environment variables | Verify .env values and rebuild\\nStatic assets not loading | Cache not invalidated | Run CloudFront invalidation\\nAPI calls failing | API URL misconfigured | Check REACT_APP_API_URL in .env\\nSlow page load | Unoptimized build | Ensure npm run build is used for production\\nDeployment fails in CI/CD | Outdated Node.js or npm | Upgrade to required versions\\n\\n### 5. Best Practices\\n\\n\u2022 Branch Strategy\\n  \u2022 Use develop \u2192 staging\\n  \u2022 Use main \u2192 production\\n\u2022 Automated Builds\\n  \u2022 Configure CI/CD (e.g., GitHub Actions, Jenkins) to handle build & deploy\\n\u2022 Environment Separation\\n  \u2022 Never use production API keys in staging builds\\n\u2022 Testing Before Deployment\\n  \u2022 Run unit and integration tests before merging:npm test\\n\u2022 Versioning\\n  \u2022 Tag releases in Git for easier rollback:git tag -a v1.2.0 -m \"Frontend release 1.2.0\"\\n  git push origin v1.2.0\\n\u2022 Post-Deployment Monitoring\\n  \u2022 Use tools like AWS CloudWatch or Sentry to monitor errors and performance\\n\\n\u2705 Following this guide will help ensure deployments are predictable, reproducible, and low-risk for the AdvantaLabs frontend.', 'title': '1. Introduction (AdvantaLabs \u2013 Frontend Deployment Guide)', 'pageTitle': 'AdvantaLabs \u2013 Frontend Deployment Guide', 'id': '21e7f1fd-d337-437e-aa9b-157c6e065541'}}]\n\n",
  "System": "\nYou are an AI assistant. You will always be given:\n1. A **User Prompt** (the question or request).\n2. A **Context** retrieved from a vector database.\n\n\u26a0\ufe0f Important:\n- The provided context may be incomplete, partially irrelevant, or slightly inaccurate. \n- Use the context only if it clearly supports the user\u2019s prompt.\n- If the context is not useful, ignore it and rely on your own knowledge.\n- Always keep responses direct, accurate, and easy to understand.\n- remember your are facing user so don't say thing like based on provided context or somethimg like that\n\n### Response Format (strictly follow JSON structure):\n\n{\n  \"answer\": \"<Direct and concise response to the user\u2019s prompt>\",\n  \"context_used\": \"<Only the specific parts of the provided context that were relevant. If none, return 'N/A'>\",\n  \"confidence\": \"<High | Medium | Low \u2014 based on how relevant and reliable the context is>\",\n  \"notes\": \"<Any clarifications, assumptions, or reasoning behind your answer. If none, return 'N/A'>\"\n}\n\n### Guidelines:\n- Do NOT include unnecessary information.\n- Keep \"answer\" user-focused, not context-focused.\n- If multiple interpretations are possible, state assumptions in 'notes'.\n- If context conflicts with general knowledge, prefer accurate knowledge but mention the conflict in 'notes'.\n",
  "Stream": false
}
